{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/dene/takvim/CalendarApp/frontend/src/components/calendar/CalendarGrid.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GridWrapper = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n    grid-gap: 1px;\n    background-color: ${props => props.isHeader ? '#1E1F21' : '#4D4C4D'};\n\t${props => props.isHeader && `border-bottom: 1px solid #4D4C4D`}\n`;\n_c = GridWrapper;\nconst CellWrapper = styled.div`\n\tmin-height: ${props => props.isHeader ? 24 : 80}px;\n\tmin-width: 140px;\n\tbackground-color: ${props => props.isWeekday ? '#27282A' : '#1E1F21'};\n\tcolor: ${props => props.isSelectedMonth ? '#DDDDDD' : '#555759'};\n`;\n_c2 = CellWrapper;\nconst RowInCell = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: ${props => props.justifyContent ? props.justifyContent : 'flex-start'};\n    ${props => props.pr && `padding-right: ${props.pr * 8}px`}\n`;\n_c3 = RowInCell;\nconst DayWrapper = styled.div`\n\theight: 31px;\n\twidth: 31px;\n    display: flex;\n    font-size: 15px;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n`;\n_c4 = DayWrapper;\nconst CurrentDay = styled('div')`\n  height: 100%;\n  width: 100%;\n  background: #f00;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c5 = CurrentDay;\nconst ShowDayWrapper = styled('div')`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n`;\n_c6 = ShowDayWrapper;\nconst EventListWrapper = styled('ul')`\n\tmargin: unset;\n\tlist-style-position: inside;\n\tpadding-left: 4px;\n`;\n_c7 = EventListWrapper;\nconst EventItemWrapper = styled('button')`\n\tposition: relative;\n\tleft: -14px;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n\twhite-space: nowrap;\n\twidth: 114px;\n\tborder: unset;\n\tbackground: unset;\n\tcolor: #DDDDDD;\n\tcursor: pointer;\n\tmargin: 0;\n\tpadding: 0;\n\ttext-align: left;\n`;\n_c8 = EventItemWrapper;\nexport const CalendarGrid = _ref => {\n  let {\n    startDay,\n    today,\n    eventList,\n    openFormHandler\n  } = _ref;\n  const day = startDay.clone().subtract(1, 'days');\n  const daysArray = [...Array(42)].map(() => day.add(1, 'day').clone());\n\n  const isCurrentDay = day => moment().isSame(day, 'day');\n\n  const isSelectedMonth = day => today.isSame(day, 'month');\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GridWrapper, {\n      isHeader: true,\n      children: [...Array(7)].map((_, i) => /*#__PURE__*/_jsxDEV(CellWrapper, {\n        isHeader: true,\n        isSelectedMonth: true,\n        children: /*#__PURE__*/_jsxDEV(RowInCell, {\n          justifyContent: 'flex-end',\n          pr: 1,\n          children: moment().day(i + 1).format('dddd')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GridWrapper, {\n      children: daysArray.map(dayItem => /*#__PURE__*/_jsxDEV(CellWrapper, {\n        isWeekday: dayItem.day() === 6 || dayItem.day() === 0,\n        isSelectedMonth: isSelectedMonth(dayItem),\n        children: /*#__PURE__*/_jsxDEV(RowInCell, {\n          justifyContent: 'flex-end',\n          children: [/*#__PURE__*/_jsxDEV(ShowDayWrapper, {\n            children: /*#__PURE__*/_jsxDEV(DayWrapper, {\n              onClick: e => openFormHandler('create'),\n              children: isCurrentDay(dayItem) ? /*#__PURE__*/_jsxDEV(CurrentDay, {\n                children: dayItem.format(\"D\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 49\n              }, this) : dayItem.format(\"D\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(EventListWrapper, {\n            children: eventList.filter(event => event.date >= dayItem.format('X') && event.date <= dayItem.clone().endOf('day').format('X')).map(event => localStorage.getItem('auth_id') == event.userid ? /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(EventItemWrapper, {\n                onClick: e => openFormHandler('update', event),\n                children: event.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 57\n              }, this)\n            }, event.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 53\n            }, this) : null)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)\n      }, dayItem.unix(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c9 = CalendarGrid;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"GridWrapper\");\n$RefreshReg$(_c2, \"CellWrapper\");\n$RefreshReg$(_c3, \"RowInCell\");\n$RefreshReg$(_c4, \"DayWrapper\");\n$RefreshReg$(_c5, \"CurrentDay\");\n$RefreshReg$(_c6, \"ShowDayWrapper\");\n$RefreshReg$(_c7, \"EventListWrapper\");\n$RefreshReg$(_c8, \"EventItemWrapper\");\n$RefreshReg$(_c9, \"CalendarGrid\");","map":{"version":3,"sources":["/opt/lampp/htdocs/dene/takvim/CalendarApp/frontend/src/components/calendar/CalendarGrid.js"],"names":["React","styled","moment","GridWrapper","div","props","isHeader","CellWrapper","isWeekday","isSelectedMonth","RowInCell","justifyContent","pr","DayWrapper","CurrentDay","ShowDayWrapper","EventListWrapper","EventItemWrapper","CalendarGrid","startDay","today","eventList","openFormHandler","day","clone","subtract","daysArray","Array","map","add","isCurrentDay","isSame","_","i","format","dayItem","e","filter","event","date","endOf","localStorage","getItem","userid","title","id","unix"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nconst GridWrapper = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n    grid-gap: 1px;\n    background-color: ${props => props.isHeader ? '#1E1F21' : '#4D4C4D'};\n\t${props => props.isHeader && `border-bottom: 1px solid #4D4C4D`}\n`;\n\nconst CellWrapper = styled.div`\n\tmin-height: ${props => props.isHeader ? 24 : 80}px;\n\tmin-width: 140px;\n\tbackground-color: ${props => props.isWeekday ? '#27282A' : '#1E1F21'};\n\tcolor: ${props => props.isSelectedMonth ? '#DDDDDD' : '#555759'};\n`;\n\nconst RowInCell = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: ${props => props.justifyContent ? props.justifyContent : 'flex-start'};\n    ${props => props.pr && `padding-right: ${props.pr * 8}px`}\n`;\n\nconst DayWrapper = styled.div`\n\theight: 31px;\n\twidth: 31px;\n    display: flex;\n    font-size: 15px;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n`;\n\nconst CurrentDay = styled('div')`\n  height: 100%;\n  width: 100%;\n  background: #f00;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ShowDayWrapper = styled('div')`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n`;\n\nconst EventListWrapper = styled('ul')`\n\tmargin: unset;\n\tlist-style-position: inside;\n\tpadding-left: 4px;\n`;\n\nconst EventItemWrapper = styled('button')`\n\tposition: relative;\n\tleft: -14px;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n\twhite-space: nowrap;\n\twidth: 114px;\n\tborder: unset;\n\tbackground: unset;\n\tcolor: #DDDDDD;\n\tcursor: pointer;\n\tmargin: 0;\n\tpadding: 0;\n\ttext-align: left;\n`;\n\n\nexport const CalendarGrid = ({ startDay, today, eventList, openFormHandler }) => {\n    const day = startDay.clone().subtract(1, 'days');\n    const daysArray = [...Array(42)].map(() => day.add(1, 'day').clone());\n\n    const isCurrentDay = (day) => moment().isSame(day, 'day');\n    const isSelectedMonth = (day) => today.isSame(day, 'month');\n\n    return (\n        <>\n            <GridWrapper isHeader>\n                {\n                    [...Array(7)].map((_, i) => (\n                        <CellWrapper isHeader isSelectedMonth key={i}>\n                            <RowInCell justifyContent={'flex-end'} pr={1}>\n                                {moment().day(i + 1).format('dddd')}\n                            </RowInCell>\n                        </CellWrapper>\n                    ))\n                }\n            </GridWrapper>\n            <GridWrapper>\n\n                {\n                    daysArray.map((dayItem) => (\n                        <CellWrapper\n                            isWeekday={dayItem.day() === 6 || dayItem.day() === 0}\n                            key={dayItem.unix()}\n                            isSelectedMonth={isSelectedMonth(dayItem)}\n                        >\n                            <RowInCell justifyContent={'flex-end'}>\n                                <ShowDayWrapper>\n                                    <DayWrapper onClick={(e) => openFormHandler('create')}>\n                                        {\n                                            isCurrentDay(dayItem) ? (\n                                                <CurrentDay>{dayItem.format(\"D\")}</CurrentDay>\n                                            ) : (\n                                                dayItem.format(\"D\")\n                                            )\n                                        }\n\n                                    </DayWrapper>\n                                </ShowDayWrapper>\n                                <EventListWrapper>\n                                    {\n                                        eventList.filter(event => event.date >= dayItem.format('X') && event.date <= dayItem.clone().endOf('day').format('X'))\n                                            .map(event => (\n                                                localStorage.getItem('auth_id') == event.userid ? (\n                                                    <li key={event.id}>\n                                                        <EventItemWrapper onClick={(e) => openFormHandler('update', event)}>\n                                                            {event.title}\n                                                        </EventItemWrapper>\n                                                    </li>\n                                                ) : null\n                                            ))\n                                    }\n                                </EventListWrapper>\n                            </RowInCell>\n                        </CellWrapper>\n                    ))\n                }\n            </GridWrapper>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}