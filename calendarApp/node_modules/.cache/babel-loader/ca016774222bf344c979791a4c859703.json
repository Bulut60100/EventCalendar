{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/dene/CalendarApp/frontend/src/components/calendar/CalendarGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GridWrapper = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n    grid-gap: 1px;\n    background-color: ${props => props.isHeader ? '#1E1F21' : '#4D4C4D'};\n\t${props => props.isHeader && `border-bottom: 1px solid #4D4C4D`}\n`;\n_c = GridWrapper;\nconst CellWrapper = styled.div`\n\tmin-height: ${props => props.isHeader ? 24 : 80}px;\n\tmin-width: 140px;\n\tbackground-color: ${props => props.isWeekday ? '#27282A' : '#1E1F21'};\n\tcolor: ${props => props.isSelectedMonth ? '#DDDDDD' : '#555759'};\n`;\n_c2 = CellWrapper;\nconst RowInCell = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: ${props => props.justifyContent ? props.justifyContent : 'flex-start'};\n    ${props => props.pr && `padding-right: ${props.pr * 8}px`}\n`;\n_c3 = RowInCell;\nconst DayWrapper = styled.div`\n\theight: 31px;\n\twidth: 31px;\n    display: flex;\n    font-size: 15px;\n    align-items: center;\n    justify-content: center;\n`;\n_c4 = DayWrapper;\nconst CurrentDay = styled('div')`\n  height: 100%;\n  width: 100%;\n  background: #f00;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c5 = CurrentDay;\nconst ShowDayWrapper = styled('div')`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n`;\n_c6 = ShowDayWrapper;\nconst EventListWrapper = styled('ul')`\n\tmargin: unset;\n\tlist-style-position: inside;\n\tpadding-left: 4px;\n`;\n_c7 = EventListWrapper;\nexport const CalendarGrid = _ref => {\n  _s();\n\n  let {\n    startDay,\n    today\n  } = _ref;\n  const day = startDay.clone().subtract(1, 'days');\n  const daysArray = [...Array(42)].map(() => day.add(1, 'day').clone());\n\n  const isCurrentDay = day => moment().isSame(day, 'day');\n\n  const isSelectedMonth = day => today.isSame(day, 'month');\n\n  console.log(daysArray);\n  useEffect(() => {\n    axios.get('http://localhost:8001/api/events').then(res => {\n      console.log(res.event);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GridWrapper, {\n      isHeader: true,\n      isSelectedMonth: true,\n      children: [...Array(7)].map((_, i) => /*#__PURE__*/_jsxDEV(CellWrapper, {\n        isHeader: true,\n        children: /*#__PURE__*/_jsxDEV(RowInCell, {\n          justifyContent: 'flex-end',\n          pr: 1,\n          children: moment().day(i + 1).format('dddd')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GridWrapper, {\n      children: daysArray.map(dayItem => /*#__PURE__*/_jsxDEV(CellWrapper, {\n        isWeekday: dayItem.day() === 6 || dayItem.day() === 0,\n        isSelectedMonth: isSelectedMonth(dayItem),\n        children: /*#__PURE__*/_jsxDEV(RowInCell, {\n          justifyContent: 'flex-end',\n          children: [/*#__PURE__*/_jsxDEV(ShowDayWrapper, {\n            children: /*#__PURE__*/_jsxDEV(DayWrapper, {\n              children: isCurrentDay(dayItem) ? /*#__PURE__*/_jsxDEV(CurrentDay, {\n                children: dayItem.format(\"D\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 45\n              }, this) : dayItem.format(\"D\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(EventListWrapper, {\n            children: \"asd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this)\n      }, dayItem.unix(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CalendarGrid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c8 = CalendarGrid;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"GridWrapper\");\n$RefreshReg$(_c2, \"CellWrapper\");\n$RefreshReg$(_c3, \"RowInCell\");\n$RefreshReg$(_c4, \"DayWrapper\");\n$RefreshReg$(_c5, \"CurrentDay\");\n$RefreshReg$(_c6, \"ShowDayWrapper\");\n$RefreshReg$(_c7, \"EventListWrapper\");\n$RefreshReg$(_c8, \"CalendarGrid\");","map":{"version":3,"sources":["/opt/lampp/htdocs/dene/CalendarApp/frontend/src/components/calendar/CalendarGrid.js"],"names":["React","useEffect","styled","moment","axios","GridWrapper","div","props","isHeader","CellWrapper","isWeekday","isSelectedMonth","RowInCell","justifyContent","pr","DayWrapper","CurrentDay","ShowDayWrapper","EventListWrapper","CalendarGrid","startDay","today","day","clone","subtract","daysArray","Array","map","add","isCurrentDay","isSame","console","log","get","then","res","event","_","i","format","dayItem","unix"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport axios from 'axios';\n\nconst GridWrapper = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n    grid-gap: 1px;\n    background-color: ${props => props.isHeader ? '#1E1F21' : '#4D4C4D'};\n\t${props => props.isHeader && `border-bottom: 1px solid #4D4C4D`}\n`;\n\nconst CellWrapper = styled.div`\n\tmin-height: ${props => props.isHeader ? 24 : 80}px;\n\tmin-width: 140px;\n\tbackground-color: ${props => props.isWeekday ? '#27282A' : '#1E1F21'};\n\tcolor: ${props => props.isSelectedMonth ? '#DDDDDD' : '#555759'};\n`;\n\nconst RowInCell = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: ${props => props.justifyContent ? props.justifyContent : 'flex-start'};\n    ${props => props.pr && `padding-right: ${props.pr * 8}px`}\n`;\n\nconst DayWrapper = styled.div`\n\theight: 31px;\n\twidth: 31px;\n    display: flex;\n    font-size: 15px;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst CurrentDay = styled('div')`\n  height: 100%;\n  width: 100%;\n  background: #f00;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ShowDayWrapper = styled('div')`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n`;\n\nconst EventListWrapper = styled('ul')`\n\tmargin: unset;\n\tlist-style-position: inside;\n\tpadding-left: 4px;\n`;\n\nexport const CalendarGrid = ({ startDay, today }) => {\n    const day = startDay.clone().subtract(1, 'days');\n    const daysArray = [...Array(42)].map(() => day.add(1, 'day').clone());\n\n    const isCurrentDay = (day) => moment().isSame(day, 'day');\n    const isSelectedMonth = (day) => today.isSame(day, 'month');\n    console.log(daysArray);\n\n    useEffect(()=>{\n        axios.get('http://localhost:8001/api/events').then(res => {\n            console.log(res.event);\n        })\n    }, []);\n\n    return (\n        <>\n            <GridWrapper isHeader isSelectedMonth>\n                {\n                    [...Array(7)].map((_, i) => (\n                        <CellWrapper isHeader>\n                            <RowInCell justifyContent={'flex-end'} pr={1}>\n                            {moment().day(i+1).format('dddd')}\n                            </RowInCell>\n                        </CellWrapper>\n                    ))\n                }\n            </GridWrapper>\n            <GridWrapper>\n\n                {\n                    daysArray.map((dayItem) => (\n                        <CellWrapper\n                            isWeekday={dayItem.day() === 6 || dayItem.day() === 0}\n                            key={dayItem.unix()}\n                            isSelectedMonth={isSelectedMonth(dayItem)}\n                        >\n                            <RowInCell justifyContent={'flex-end'}>\n                                <ShowDayWrapper>\n                                <DayWrapper>\n                                    {\n                                        isCurrentDay(dayItem) ? (\n                                            <CurrentDay>{dayItem.format(\"D\")}</CurrentDay>\n                                        ) : (\n                                            dayItem.format(\"D\")\n                                        )\n                                    }\n                                    \n                                </DayWrapper>\n                                </ShowDayWrapper>\n                                <EventListWrapper>\n                                    asd\n                                </EventListWrapper>\n                            </RowInCell>\n                        </CellWrapper>\n                    ))\n                }\n            </GridWrapper>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}